import com.jmo.streamlets.utils.StreamletUtils;
import org.apache.heron.streamlet.Builder;
import org.apache.heron.streamlet.Config;
import org.apache.heron.streamlet.Runner;
import org.apache.heron.streamlet.Streamlet;
import org.apache.heron.streamlet.impl.BuilderImpl;

import java.util.Properties;

import java.util.logging.Logger;

public class CLASSNAME {

private static final Logger LOG = Logger.getLogger(CLASSNAME.class.getName());

  private static boolean throttle;
  private static int msDelay;
  private static int nsDelay;
  private static int msgTimeout;
  private static int simTimeInSecs;

  // Default Heron resources to be applied to the topology
  private static double cpu;
  private static int gigabytesOfRam;
  private static int numContainers;
  private static Config.DeliverySemantics semantics;

  public static void main(String[] args) throws Exception {

    Properties prop = new Properties();
    if (!readProperties(prop)) {
      LOG.severe("Error reading config file");
      return;
    }
    FilesystemSinkStreamlet streamletInstance = new FilesystemSinkStreamlet();
    streamletInstance.runStreamlet(StreamletUtils.getTopologyName(args));
  }

  private static boolean readProperties(Properties prop) {
    try(InputStream input = new FileInputStream("conf/config.properties")) {
      prop.load(input);
      throttle = Boolean.parseBoolean(prop.getProperty("THROTTLE"));
      msDelay = Integer.parseInt(prop.getProperty("MS_DELAY"));
      nsDelay = Integer.parseInt(prop.getProperty("NS_DELAY"));
      cpu = Double.parseDouble(prop.getProperty("CPU"));
      gigabytesOfRam = Integer.parseInt(prop.getProperty("GIGABYTES_OF_RAM"));
      numContainers = Integer.parseInt(prop.getProperty("NUM_CONTAINERS"));
      semantics = Config.DeliverySemantics.valueOf(prop.getProperty("SEMANTICS"));
      msgTimeout = Integer.parseInt(prop.getProperty("MSG_TIMEOUT"));
      simTimeInSecs = Integer.parseInt(prop.getProperty("SIM_TIME_IN_SECS"));
    } catch (IOException ex) {
      return false;
    }
    return true;
  }

  public void runStreamlet(String topologyName) {

    Builder builder = Builder.newBuilder();
    createProcessingGraph(builder);

    Config config = Config.newBuilder()
        .setNumContainers(NUM_CONTAINERS)
        .setPerContainerRamInGigabytes(GIGABYTES_OF_RAM)
        .setPerContainerCpu(CPU)
        .setDeliverySemantics(semantics)
        .setUserConfig("topology.message.timeout.secs", msgTimeout)
        .setUserConfig("topology.droptuples.upon.backpressure", false)
        .build();

    if (topologyName == null)
      StreamletUtils.runInSimulatorMode((BuilderImpl) builder, config, 60);
    else
      new Runner().run(topologyName, config, builder);
  }

  //
  // Topology specific setup and processing graph creation.
  //

  private void createProcessingGraph(Builder builder) {
  }
}